import Data.List (sortBy)

-- HC1T1 - Basic Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double


-- HC1T2 - Pure Function Example
circleArea :: Floating a => a -> a
circleArea r = pi * r * r


-- HC1T3 - Checking if a Number is Greater than 18
greaterThan18 :: (Ord a, Num a) => a -> Bool
greaterThan18 x = x > 18


-- HC1T4 - Composing a Function to Process Player Data
extractPlayers :: [(String, Int)] -> [String]
extractPlayers = map fst

sortByScore :: [(String, Int)] -> [(String, Int)]
sortByScore = reverse . sortBy (\(_, s1) (_, s2) -> compare s1 s2)

topThree :: [(String, Int)] -> [(String, Int)]
topThree = take 3

getTopThreePlayers :: [(String, Int)] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore


-- HC1T5 - Laziness in Haskell
infiniteNumbers :: [Integer]
infiniteNumbers = [1..]

firstN :: Int -> [Integer]
firstN n = take n infiniteNumbers


-- HC1T6 - Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y


-- HC1T7 - Converting Fahrenheit to Celsius
fToC :: Floating a => a -> a
fToC f = (f - 32) * 5 / 9


-- HC1T8 - Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)


-- Main function for testing
main :: IO ()
main = do
  putStrLn "doubleThenIncrement 5:"
  print (doubleThenIncrement 5)

  putStrLn "circleArea 2:"
  print (circleArea 2)

  putStrLn "greaterThan18 20:"
  print (greaterThan18 20)

  let players = [("Alice", 45), ("Bob", 60), ("Carol", 50), ("Dave", 80)]
  putStrLn "getTopThreePlayers:"
  print (getTopThreePlayers players)

  putStrLn "firstN 5:"
  print (firstN 5)

  putStrLn "addNumbers 3 4:"
  print (addNumbers 3 4)

  putStrLn "fToC 212:"
  print (fToC 212)

  putStrLn "applyTwice (+3) 5:"
  print (applyTwice (+3) 5)
